<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://www.sumitkumar.in</link>
    <atom:link href="http://www.sumitkumar.in/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-US</language>
    <pubDate>Mon, 5 Dec 2016 09:20:50 -0800</pubDate>
    <lastBuildDate>Mon, 5 Dec 2016 09:20:50 -0800</lastBuildDate>

    
    <item>
      <title>Bash recipes</title>
      <link>http://www.sumitkumar.in/blog/2016/bash_shell_scripting_tips.html</link>
      <pubDate>Mon, 5 Dec 2016 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2016/bash_shell_scripting_tips.html</guid>
      <description>
      &lt;h2&gt;Using script name and path in the script&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
SCRIPT_DIR=$(dirname &quot;$0&quot;)
SCRIPT_NAME=$(basename &quot;$0&quot;)
&lt;/pre&gt;&lt;h2&gt;Iterate N times&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
        for (( i=0; i&lt;$N; i++ ));
        do
				# do whatever
        done
&lt;/pre&gt;&lt;h2&gt;Retry using while&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		while [ &quot;$success&quot; != &quot;0&quot; -a &quot;$retryAttempt&quot; -le &quot;$MAX_RETRIES&quot; ];
		do
				retryAttempt=$((retryAttempt + 1))
				sleep $SLEEP_INTERVAL
				## do some work that returns with exit code 0 on success
				## and non-zero exit code on error
				success=&quot;$?&quot;
		done
&lt;/pre&gt;&lt;h2&gt;Iterate over an array using indices&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
        # declare an array as below, default field separator is space
        myArray=(&quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;)
        desiredValue=&quot;elem2&quot;
        myArrayCount=${#myArray[@]}
        for (( i=0; i&lt;${myArrayCount}; i++ ));
        do
           if [ &quot;${myArray[$i]}&quot; == &quot;$desiredValue&quot; ]; then
				# do something, for example just echo
				echo &quot;Found ${myArray[$i]}&quot;
           fi
        done
&lt;/pre&gt;&lt;h2&gt;Append element to a variable&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		myVar=&quot;elem1&quot;
		myVar+=&quot;elem2&quot;
		myVar+=&quot; elem3&quot;
		# now myVar is &quot;elem1elem2 elem3&quot;
&lt;/pre&gt;&lt;h2&gt;Append element to an array&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		myArray=()
		myArray+=(&quot;elem1&quot;)
		myArray+=(&quot;elem2&quot;)
		myArray+=(&quot;elem3&quot;)
		# now myArray is (&quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;)
&lt;/pre&gt;&lt;h2&gt;Join an array of strings on a delimiter&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
function joinStrings(){
	local d=$1
	shift
	echo -n &quot;$1&quot;
	shift
	printf &quot;%s&quot; &quot;${@/#/$d}&quot;
}

# joinStrings &quot;:::&quot; a b c -&gt; a:::b:::c
&lt;/pre&gt;&lt;h2&gt;Taking array as argument for a function call&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		function myFunc(){
                local array=(&quot;$@&quot;)
                local i=0
                for elem in ${array[@]};
                do
                        echo &quot;elem[$i]=${elem}&quot;
                        i=$((i + 1))
                done

                ## using indices
                elemsCount=${#array[@]}
                for (( i=0; i&lt;${elemsCount}; i++ ));
                do
                        echo &quot;elem[$i]=${array[$i]}&quot;
                done
		}

		myFunc &quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;
&lt;/pre&gt;&lt;h2&gt;Taking fixed number of mixed arguments for a function call&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		# takes 3 arguments, third argument is an array
		function myFunc(){
				local param1=$1
				local param2=$2
				shift
				shift
				local array=(&quot;$@&quot;)
				local i=0
				for elem in ${array[@]};
				do
						echo &quot;elem[$i]=${elem}&quot;
						i=$((i + 1))
				done

				## using indices
				elemsCount=${#array[@]}
				for (( i=0; i&lt;${elemsCount}; i++ ));
				do
						echo &quot;elem[$i]=${array[$i]}&quot;
				done
				echo &quot;param1=$param1&quot;
				echo &quot;param2=$param2&quot;
		}

		myFunc &quot;param1&quot; &quot;param2&quot; &quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;
&lt;/pre&gt;&lt;h2&gt;Taking multiple arrays as arguments for a function call&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
function myFunc(){
  local array1=($1)
  local array2=($2)

  echo &quot;array1=${array1[@]}&quot;
  echo &quot;array2=${array2[@]}&quot;
}
# everything in between quotes (&quot; &quot;) is treated as a single argument irrespective of spaces
myFunc &quot;$(joinStrings &apos; &apos; a b c)&quot; &quot;$(joinStrings &apos; &apos; d e f)&quot; 
&lt;/pre&gt;&lt;h2&gt;Log all script parameters (including the script name)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
echo &quot;$0 $@&quot; &gt;&gt; ${LOG_FILE}
&lt;/pre&gt;&lt;h2&gt;Trap interrupts and exit instead of continuing the loop&lt;/h2&gt;&lt;p&gt;If there are loops in script logic and there are interrupts (like CTRL-C), the shell terminates the immediate operation but continues to the next iteration of the loop. To terminate the script completely, following statement must be used before executing the loop.&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;trap &quot;echo Exited!; exit;&quot; SIGINT SIGTERM&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Running parallel operations in batches&lt;/h2&gt;&lt;p&gt;Shell scripts don&apos;t have threads however they can leverage background jobs to run parallel operations. This works with both function calls and shell commands.&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;

		function waitForBackgroundProcesses(){
			local pids=($@)
			local pidCount=${#pids[@]}
			for (( i=0; i&lt;$pidCount; i++ ))
			do  
				local bgPid=${pids[$i]}
				wait $bgPid
				echo &quot;$bgPid exited with code: $?&quot; 
			done
		}

		function doBusyTask(){
			sleep $1
		}

		BATCH_SIZE=2
		pidsInBatch=()
		args=(2 4 5 2 1 3)
		for arg in ${args[@]};
		do
			doBusyTask $arg &amp;
			processId=&quot;$!&quot;
			pidsInBatch+=($processId)
			if [ &quot;${#pidsInBatch[@]}&quot; == &quot;$BATCH_SIZE&quot; ];then
				waitForBackgroundProcesses ${pidsInBatch[@]}
				pidsInBatch=()
			fi  
		done
&lt;/pre&gt;&lt;p&gt;However when parent script exits, it will leave the background jobs running. To terminate background jobs as well, we need to do another trap handling for script exit:&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;trap &apos;bgPids=$(jobs -pr); [ -z &quot;$bgPids&quot; ] || kill &quot;$bgPids&quot;;&apos; EXIT&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Compare two files line by line ignoring the ordering&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# returns 1 if the match doesn&apos;t hold true
# otherwise 0
#
# return code can be verified as exit code after
# the function call
function compareFile1InFile2(){
	local file1=$1
	local file2=$2
	local lineCountFile1=$(cat $file1|wc -l)
	local numberOfLinesMatched=$(grep -f &quot;$file1&quot; &quot;$file2&quot; |sort -u|wc -l)
	if [ &quot;$numberOfLinesMatched&quot; != &quot;$lineCountFile1&quot; ];then
		return 1
	else
		return 0
	fi
}
&lt;/pre&gt;&lt;h2&gt;Diff between two variables&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# example:
#	diffVar1Var2 &quot;$var1&quot; &quot;$var2&quot;
function diffVar1Var2(){
        local var1=$1
        local var2=$2
        diff &lt;(echo &quot;$var1&quot;) &lt;(echo &quot;$var2&quot;)
}
&lt;/pre&gt;&lt;h2&gt;Show differences between two arrays&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# space works as separator for elements inside a variable
# example:
#	diffXVar1Var2 &quot;${array1[@]}&quot; &quot;${array2[@]}&quot;
function diffXVar1Var2(){
        local var1=$1
        local var2=$2
        diff &lt;(echo &quot;$var1&quot;|tr &apos; &apos; &apos;\n&apos;|sort) &lt;(echo &quot;$var2&quot;|tr &apos; &apos; &apos;\n&apos;|sort)
}
&lt;/pre&gt;&lt;h2&gt;Check if host is reachable on a given port&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
function isReachable(){
	local host=$1
	local port=$2
	nc -w 1 -z &quot;$host&quot; &quot;$port&quot;
}
&lt;/pre&gt;&lt;h2&gt;Multi-line echo statements&lt;/h2&gt;&lt;p&gt;This is very useful for generating a templated output&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
cat&amp;lt;&amp;lt;EOL
# can use shell variables as well in between the EOL,
# the variables would be expanded.
var1=$var1
EOL
&lt;/pre&gt;&lt;h2&gt;Handling script inputs&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# verify that parameters were passed
[ &quot;$#&quot; == &quot;0&quot; ] &amp;&amp; showUsage
# &quot;:&quot; after a character indicates the parameter requires a value
# for example after a and p
while getopts &quot;fa:p:&quot; opt; do
	case &quot;$opt&quot; in
		f) flagEnabled=&quot;1&quot; ;;
		a) argsAsArray+=(&quot;$OPTARG&quot;) ;;
		s) argAsParam=&quot;$OPTARG&quot; ;;
		*) 
		   showUsage &gt;&amp;2
		   ;;
	esac
done
validateOptions
&lt;/pre&gt;&lt;h2&gt;Log all script activity to a log file&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# enable debugging, prints script lines to the stdout
set -x
# execute the rest of the script and append the output to 
# LOG_FILE 
exec &amp;&gt; &gt;(tee -a &quot;$LOG_FILE&quot;)
# write stderr to stdout for the rest of the script
exec 2&gt;&amp;1
&lt;/pre&gt;&lt;h2&gt;Checking regex in if condition&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# check if value of var starts with &quot;MY_PREFIX&quot;
if [[ &quot;$var&quot; =~ ^MY_PREFIX ]];then
	# do something
fi
# check if value of var doesn&apos;t start with &quot;MY_PREFIX&quot;
if [[ ! &quot;$var&quot; =~ ^MY_PREFIX ]];then
	# do something
fi
# check if value of var contains &quot;MY_VALUE&quot;
if [[ &quot;$var&quot; =~ MY_VALUE ]];then
	# do something
fi
&lt;/pre&gt;&lt;h2&gt;Sharing variables and utility functions across multiple scripts&lt;/h2&gt;&lt;p&gt;Define shared variables and utility functions in logically separate scripts and include them in every script where needed like below.&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
source path/library1.sh
. path/library2.sh
&lt;/pre&gt;&lt;h2&gt;Reading a file line by line&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
OLDIFS=$IFS
# changing field separator so that we can read line by line
IFS=$&apos;\n&apos;
i=1
allLines=$(cat ${FILE})
for line in $allLines;
do
	# changing field separator back so that rest of the logic works normally
	IFS=$OLDIFS
	echo &quot;line $i: $line&quot;
	i=$((i + 1))
done
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>Git: quick tips</title>
      <link>http://www.sumitkumar.in/blog/2015/git_tips.html</link>
      <pubDate>Mon, 9 Nov 2015 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2015/git_tips.html</guid>
      <description>
      &lt;p&gt;&lt;strong&gt;Handy commands&lt;/strong&gt;&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;&lt;li&gt;Change a commit message (only if it has not been pushed to upstream)&lt;/li&gt;&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;$ git commit --amend -m &quot;&amp;lt;NEW_COMMIT_MESSAGE&amp;gt;&quot;&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;li&gt;Merge multiple changes from a separate branch &quot;branch-x&quot; into current branch&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git merge --squash branch-x
&lt;/pre&gt;
&lt;li&gt;Pull changes from remote without creating &quot;pseudo change&quot; commits and rebase local changes on top of remote state&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git pull --rebase
&lt;/pre&gt;
&lt;li&gt;Merge and/or squash multiple changes (N number of commits) in current branch&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git rebase -i HEAD~N
&lt;/pre&gt;
&lt;li&gt;Push local branch to a different branch&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git push origin branch-x-v2:branch-x-v2-sumit
Total 0 (delta 0), reused 0 (delta 0)
To ssh://git.server.com/pkg/MyPackage
 * [new branch]      branch-x-v2 -&gt; branch-x-v2-sumit
&lt;/pre&gt;
&lt;li&gt;Rename a remote branch without changing local branches &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git push origin origin/branch-x-v2:refs/heads/branch-x-v2-old :branch-x-v2
Total 0 (delta 0), reused 0 (delta 0)
To ssh://git.server.com/pkg/MyPackage
 - [deleted]         branch-x-v1
 * [new branch]      origin/branch-x-v2 -&gt; branch-x-v2-old
&lt;/pre&gt;&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Git Stash&lt;/strong&gt;&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;&lt;li&gt;Push uncommitted changes to stash &lt;/li&gt;&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;$ git stash save &quot;message&quot;&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;li&gt;See list of stashes&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash list
stash@{0}: On branch-x: foo bar 1
stash@{1}: On branch-x: foo bar
&lt;/pre&gt;
&lt;li&gt;See changes in a particular stash&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash show -p stash@{0}
diff --git a/build.xml b/build.xml
index 6ce3fdf..15669ac 100644
--- a/build.xml
+++ b/build.xml
@@ -2,7 +2,6 @@
 
....
....
&lt;/pre&gt;
&lt;li&gt;Remove a single stash from the list and apply to current state&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash pop stash@{1}
On branch branch-x
Your branch is up-to-date with &apos;origin/branch-x&apos;.
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
 
        modified:   build.xml
 
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
 
        ....
 
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
Dropped stash@{1} (caceeb6392c7a40dd8325f3a2fdf038342e629cf)
&lt;/pre&gt;
&lt;li&gt;Apply a single stash without removing it from the list &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash apply stash@{0}
On branch branch-x
Your branch is up-to-date with &apos;origin/branch-x&apos;.
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
 
        modified:   build.xml
 
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
.....
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/pre&gt;
&lt;li&gt;Create a branch out of a stash &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash branch my-branch stash@{0}
&lt;/pre&gt;
&lt;li&gt;Drop a stash&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash drop stash@{0}   
Dropped stash@{0} (f697125c22addf9cf31e8ac36b384857110fec0e)
&lt;/pre&gt;
&lt;li&gt;Clear all stash&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash clear
&lt;/pre&gt;&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Python: pretty print json</title>
      <link>http://www.sumitkumar.in/blog/2015/pretty-print-json-shell.html</link>
      <pubDate>Mon, 9 Nov 2015 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2015/pretty-print-json-shell.html</guid>
      <description>
      &lt;p&gt;Original source: &lt;a href=&quot;http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json&quot;&gt;http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json&lt;/a&gt;&lt;/p&gt;&lt;p&gt;With Python 2.6+&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:python&quot;&gt;&lt;br/&gt;echo &apos;{&quot;foo&quot;: &quot;lorem&quot;, &quot;bar&quot;: &quot;ipsum&quot;}&apos; | python -m json.tool&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Or if the json data is in file:&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:python&quot;&gt;&lt;br/&gt;cat &amp;lt;data_file&amp;gt; | python -m json.tool&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Handly shell alias:&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
alias prettyjson=&apos;python -m json.tool&apos;
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>MySQL: drop all tables</title>
      <link>http://www.sumitkumar.in/blog/2013/mysql-drop-all-tables.html</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/mysql-drop-all-tables.html</guid>
      <description>
      &lt;pre name=&quot;code&quot; class=&quot;brush:sql&quot;&gt;
mysql -Nse &apos;show tables&apos; -u &amp;lt;user&amp;gt; -h &amp;lt;host&amp;gt; &amp;lt;dbname&amp;gt;| while read table; do \
mysql -e &quot;drop table $table&quot; -u &amp;lt;user&amp;gt; -h &amp;lt;host&amp;gt; &amp;lt;dbname&amp;gt;; 
done
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>Eclipse plugins</title>
      <link>http://www.sumitkumar.in/blog/2013/eclipse-plugins.html</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/eclipse-plugins.html</guid>
      <description>
      &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/pathtools/&quot;&gt;PathTools&lt;/a&gt;: Provides contextual menu for console, explorer etc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/zigen/home/plugin/dbviewer/about_en.html&quot;&gt;DBViewer&lt;/a&gt;: Manage your db instances right from eclipse&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marian.schedenig.name/projects/grep-console&quot;&gt;Grep Console&lt;/a&gt;: Filter what you want to see in the console&lt;/li&gt;
&lt;/ol&gt;
	  </description>
    </item>
    
    <item>
      <title>Firefox plugins</title>
      <link>http://www.sumitkumar.in/blog/2013/firefox-plugins.html</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/firefox-plugins.html</guid>
      <description>
      &lt;ol&gt;
  &lt;li&gt;WebDeveloper (download &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/web-developer/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;FoxyProxy (download &lt;a href=&quot;http://getfoxyproxy.org/downloads.html&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;LiveHttpHeaders (download &lt;a href=&quot;http://livehttpheaders.mozdev.org/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;AdBlockPlus (download &lt;a href=&quot;http://adblockplus.org/en/installation&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Delicious - (download &lt;a href=&quot;http://delicious.com/help/installff&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Smush!t - (download &lt;a href=&quot;http://developer.yahoo.com/yslow/smushit/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;FoxyTunes - (download &lt;a href=&quot;http://www.foxytunes.com/firefox/allversions.html&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;FireBug - (download &lt;a href=&quot;http://getfirebug.com/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;YSlow - (download &lt;a href=&quot;http://developer.yahoo.com/yslow/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;JsonView - (download &lt;a href=&quot;http://code.google.com/p/jsonview/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
	  </description>
    </item>
    
    <item>
      <title>Thunderbird plugins</title>
      <link>http://www.sumitkumar.in/blog/2013/thunderbird-plugins.html</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/thunderbird-plugins.html</guid>
      <description>
      &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/protz/GMail-Conversation-View&quot;&gt;Thunderbird Conversations&lt;/a&gt;: Bring GMail conversation view to your inbox&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tn123.org/mintrayr/&quot;&gt;MinimizeToTray Revived&lt;/a&gt;: Minimize thunderbird to system tray&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lookout.mozdev.org/&quot;&gt;LookOut&lt;/a&gt;: Support for M$ OLE data (calendar format, winmail.dat attachments etc)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/thunderbird/addon/4631&quot;&gt;Provider for Google Calendar&lt;/a&gt;: Support for Google calendar&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mozilla.org/projects/calendar/lightning&quot;&gt;Lightning&lt;/a&gt;: Support for calendar out of thunderbird&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clarkbw.net/blog/2009/11/23/google-calendar-in-thunderbird-tabs&quot;&gt;Google calendar tab&lt;/a&gt;: Google calendar as a tab in thunderbird&lt;/li&gt;
&lt;/ol&gt;
	  </description>
    </item>
    

  </channel> 
</rss>
