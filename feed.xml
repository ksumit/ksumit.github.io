<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://www.sumitkumar.in</link>
    <atom:link href="http://www.sumitkumar.in/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-US</language>
    <pubDate>Sat, 11 Feb 2023 11:44:47 -0800</pubDate>
    <lastBuildDate>Sat, 11 Feb 2023 11:44:47 -0800</lastBuildDate>

    
    <item>
      <title>Maven: Quick tips</title>
      <link>http://www.sumitkumar.in/blog/2023/maven_tips.html</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2023/maven_tips.html</guid>
      <description>
      &lt;h2&gt;Allow HTTP based maven repositories (by default they are blocked in Maven 3.8.x and above)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:xml&quot;&gt;
&lt;!-- Goes into ~/.m2/settings.xml --&gt;
&lt;settings&gt;
  ...
  ...

  &lt;mirrors&gt;
  &lt;!-- https://stackoverflow.com/a/68394404 --&gt;
    &lt;mirror&gt;
      &lt;id&gt;maven-default-http-blocker&lt;/id&gt;
      &lt;mirrorOf&gt;dummy&lt;/mirrorOf&gt;
      &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;
      &lt;url&gt;http://0.0.0.0/&lt;/url&gt;
      &lt;blocked&gt;false&lt;/blocked&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
&lt;/settings&gt;
&lt;/pre&gt;&lt;h2&gt;Disable expansion of &lt;code&gt;!&lt;/code&gt; (exclamation mark) while excluding modules in a maven build&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# Option 1 - Disable Shell History
set +H

# Option 2 - Use single quotes around `!` to prevent expansion OR `\` to escape it
# Below is an exmaple usecase for maven based build use case
mvn install -Phive -Pyarn -Phive-thriftserver -pl &apos;!&apos;:spark-yarn_2.12,&apos;!&apos;:spark-hive-thriftserver_2.12,&apos;!&apos;:spark-core_2.12,&apos;!&apos;:spark-sql_2.12,&apos;!&apos;:spark-mllib_2.12,&apos;!&apos;:spark-hive_2.12,&apos;!&apos;:spark-streaming-kafka-0-10_2.12

mvn install -Phive -Pyarn -Phive-thriftserver -pl \!:spark-yarn_2.12,\!:spark-hive-thriftserver_2.12,\!:spark-core_2.12,\!:spark-sql_2.12,\!:spark-mllib_2.12,\!:spark-hive_2.12,\!:spark-streaming-kafka-0-10_2.12
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>Docker: Quick tips</title>
      <link>http://www.sumitkumar.in/blog/2022/docker_tips.html</link>
      <pubDate>Fri, 8 Apr 2022 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2022/docker_tips.html</guid>
      <description>
      &lt;h2&gt;Run a container locally with an entrypoint&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker run -it ubuntu:latest /bin/bash
&lt;/pre&gt;&lt;h2&gt;Run a container locally as a root or other user with an entrypoint.&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# the user must be a valid user on the image
docker run -it -u nobody ubuntu:latest /bin/bash

# useful if root access required to update contents on the image
docker run -it -u root ubuntu:latest /bin/bash

docker exec -it -u root &lt;container_id&gt; /bin/bash
&lt;/pre&gt;&lt;h2&gt;Map host path to container path&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker run -v /home/myuser:/home/myuser -it ubuntu:latest /bin/bash
&lt;/pre&gt;&lt;h2&gt;Attach a debugging container to running container in the running container&apos;s network&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker run -it --rm --link  &lt;container_id&gt; alpine sh
&lt;/pre&gt;&lt;h2&gt;Attach a debugging container to running container in the container&apos;s PID and namespace with file system level access as well&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker run -it --pid=container:&lt;container_id&gt; --net=container:&lt;container_id&gt; --cap-add sys_admin  --cap-add sys_ptrace ubuntu:18.04 /bin/bash
&lt;/pre&gt;&lt;p&gt;Running container&apos;s file system is available in /proc/1/root/ and we can look at running processes from the running container as well from this attached container. This is powerful for debugging issues.&lt;/p&gt;&lt;h2&gt;Delete all exited containers&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker rm $(docker ps --filter status=exited -q)
&lt;/pre&gt;&lt;h2&gt;Delete clean up all resources&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker system prune -a
&lt;/pre&gt;&lt;h2&gt;Delete all local images&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
for image in $(docker image ls | awk &apos;{print $3}&apos;);
do
    docker rmi -f ${image};
done
&lt;/pre&gt;&lt;h2&gt;Delete all local volumes&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
for volume in $(docker volume ls -q);
do
    docker volume rm -f ${volume};
done
&lt;/pre&gt;&lt;h2&gt;Build an image with Dockerfile in current directory, with arguments&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker build --build-arg ARTIFACT_VERSION=0.0.1 -t &lt;image_name&gt;:0.0.1 .
&lt;/pre&gt;&lt;h2&gt;Export container&apos;s filesystem to a tar (hiding all the history and layers, flattening it)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker export $(docker ps -lq) -o foo.tar
&lt;/pre&gt;&lt;h2&gt;Save container&apos;s filesystem to a tar (along with layers and history)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker save image:tag &gt; /tmp/image.tar
&lt;/pre&gt;&lt;h2&gt;Load container image from tarball (along with layers and history)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
docker load -i /tmp/image.tar
&lt;/pre&gt;&lt;h2&gt;JDK 10 and above support consuming % of RAM (container)&lt;/h2&gt;&lt;p&gt;The JVM options can be integrated into the Dockerfile in the ENTRYPOINT Java command. But, this will require building another image each time we want to change the values of the JVM options.&lt;br/&gt;A great solution is to integrate this JVM options in the JAVA_OPTS environment variable in the Kubernetes Deployment , which looks like:&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:yaml&quot;&gt;&lt;br/&gt; ...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;env:
- name: JAVA_OPTS
  value: &amp;quot;-XX:MinRAMPercentage=20.0 -XX:MaxRAMPercentage=75.0 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/disk2/dumps&amp;quot;
...

resources: 
    limits:
        memory: 512Mi
    requests:
        memory: 256Mi

...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Bash recipes</title>
      <link>http://www.sumitkumar.in/blog/2016/bash_shell_scripting_tips.html</link>
      <pubDate>Mon, 5 Dec 2016 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2016/bash_shell_scripting_tips.html</guid>
      <description>
      &lt;h2&gt;Replace &apos;\n&apos; or &apos;\r\n&apos; with newline in a file&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
awk &apos;{ gsub(/\\n/,&quot;\n&quot;); gsub(/\\r/,&quot;&quot;); }1&apos; target_file.txt

OR

sed &apos;s/\\n/&apos;$&apos;\\n&apos;&apos;/g&apos; target_file.txt | sed &apos;s/\\r//g&apos;
&lt;/pre&gt;&lt;p&gt;#&lt;/p&gt;&lt;h2&gt;Remove everything except printable characters (required sometimes when copying special character outputs)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
sed $&apos;s/[^[:print:]\t]//g&apos; file.txt
&lt;/pre&gt;&lt;h2&gt;Disable expansion of &lt;code&gt;!&lt;/code&gt; (exclamation mark)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# Option 1 - Disable Shell History
set +H

# Option 2 - Use single quotes around `!` to prevent expansion OR `\` to escape it
# Below is an exmaple usecase for maven based build use case
mvn install -Phive -Pyarn -Phive-thriftserver -pl &apos;!&apos;:spark-yarn_2.12,&apos;!&apos;:spark-hive-thriftserver_2.12,&apos;!&apos;:spark-core_2.12,&apos;!&apos;:spark-sql_2.12,&apos;!&apos;:spark-mllib_2.12,&apos;!&apos;:spark-hive_2.12,&apos;!&apos;:spark-streaming-kafka-0-10_2.12

mvn install -Phive -Pyarn -Phive-thriftserver -pl \!:spark-yarn_2.12,\!:spark-hive-thriftserver_2.12,\!:spark-core_2.12,\!:spark-sql_2.12,\!:spark-mllib_2.12,\!:spark-hive_2.12,\!:spark-streaming-kafka-0-10_2.12
&lt;/pre&gt;&lt;h2&gt;Using script name and path in the script&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
SCRIPT_DIR=$(dirname &quot;$0&quot;)
SCRIPT_NAME=$(basename &quot;$0&quot;)
&lt;/pre&gt;&lt;h2&gt;Iterate N times&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
        for (( i=0; i&lt;$N; i++ ));
        do
				# do whatever
        done
&lt;/pre&gt;&lt;h2&gt;Retry using while&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		while [ &quot;$success&quot; != &quot;0&quot; -a &quot;$retryAttempt&quot; -le &quot;$MAX_RETRIES&quot; ];
		do
				retryAttempt=$((retryAttempt + 1))
				sleep $SLEEP_INTERVAL
				## do some work that returns with exit code 0 on success
				## and non-zero exit code on error
				success=&quot;$?&quot;
		done
&lt;/pre&gt;&lt;h2&gt;Iterate over an array using indices&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
        # declare an array as below, default field separator is space
        myArray=(&quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;)
        desiredValue=&quot;elem2&quot;
        myArrayCount=${#myArray[@]}
        for (( i=0; i&lt;${myArrayCount}; i++ ));
        do
           if [ &quot;${myArray[$i]}&quot; == &quot;$desiredValue&quot; ]; then
				# do something, for example just echo
				echo &quot;Found ${myArray[$i]}&quot;
           fi
        done
&lt;/pre&gt;&lt;h2&gt;Append element to a variable&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		myVar=&quot;elem1&quot;
		myVar+=&quot;elem2&quot;
		myVar+=&quot; elem3&quot;
		# now myVar is &quot;elem1elem2 elem3&quot;
&lt;/pre&gt;&lt;h2&gt;Append element to an array&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		myArray=()
		myArray+=(&quot;elem1&quot;)
		myArray+=(&quot;elem2&quot;)
		myArray+=(&quot;elem3&quot;)
		# now myArray is (&quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;)
&lt;/pre&gt;&lt;h2&gt;Join an array of strings on a delimiter&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
function joinStrings(){
	local d=$1
	shift
	echo -n &quot;$1&quot;
	shift
	printf &quot;%s&quot; &quot;${@/#/$d}&quot;
}

# joinStrings &quot;:::&quot; a b c -&gt; a:::b:::c
&lt;/pre&gt;&lt;h2&gt;Taking array as argument for a function call&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		function myFunc(){
                local array=(&quot;$@&quot;)
                local i=0
                for elem in ${array[@]};
                do
                        echo &quot;elem[$i]=${elem}&quot;
                        i=$((i + 1))
                done

                ## using indices
                elemsCount=${#array[@]}
                for (( i=0; i&lt;${elemsCount}; i++ ));
                do
                        echo &quot;elem[$i]=${array[$i]}&quot;
                done
		}

		myFunc &quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;
&lt;/pre&gt;&lt;h2&gt;Taking fixed number of mixed arguments for a function call&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
		# takes 3 arguments, third argument is an array
		function myFunc(){
				local param1=$1
				local param2=$2
				shift
				shift
				local array=(&quot;$@&quot;)
				local i=0
				for elem in ${array[@]};
				do
						echo &quot;elem[$i]=${elem}&quot;
						i=$((i + 1))
				done

				## using indices
				elemsCount=${#array[@]}
				for (( i=0; i&lt;${elemsCount}; i++ ));
				do
						echo &quot;elem[$i]=${array[$i]}&quot;
				done
				echo &quot;param1=$param1&quot;
				echo &quot;param2=$param2&quot;
		}

		myFunc &quot;param1&quot; &quot;param2&quot; &quot;elem1&quot; &quot;elem2&quot; &quot;elem3&quot;
&lt;/pre&gt;&lt;h2&gt;Taking multiple arrays as arguments for a function call&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
function myFunc(){
  local array1=($1)
  local array2=($2)

  echo &quot;array1=${array1[@]}&quot;
  echo &quot;array2=${array2[@]}&quot;
}
# everything in between quotes (&quot; &quot;) is treated as a single argument irrespective of spaces
myFunc &quot;$(joinStrings &apos; &apos; a b c)&quot; &quot;$(joinStrings &apos; &apos; d e f)&quot; 
&lt;/pre&gt;&lt;h2&gt;Log all script parameters (including the script name)&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
echo &quot;$0 $@&quot; &gt;&gt; ${LOG_FILE}
&lt;/pre&gt;&lt;h2&gt;Trap interrupts and exit instead of continuing the loop&lt;/h2&gt;&lt;p&gt;If there are loops in script logic and there are interrupts (like CTRL-C), the shell terminates the immediate operation but continues to the next iteration of the loop. To terminate the script completely, following statement must be used before executing the loop.&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;trap &quot;echo Exited!; exit;&quot; SIGINT SIGTERM&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Running parallel operations in batches&lt;/h2&gt;&lt;p&gt;Shell scripts don&apos;t have threads however they can leverage background jobs to run parallel operations. This works with both function calls and shell commands.&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;

		function waitForBackgroundProcesses(){
			local pids=($@)
			local pidCount=${#pids[@]}
			for (( i=0; i&lt;$pidCount; i++ ))
			do  
				local bgPid=${pids[$i]}
				wait $bgPid
				echo &quot;$bgPid exited with code: $?&quot; 
			done
		}

		function doBusyTask(){
			sleep $1
		}

		BATCH_SIZE=2
		pidsInBatch=()
		args=(2 4 5 2 1 3)
		for arg in ${args[@]};
		do
			doBusyTask $arg &amp;
			processId=&quot;$!&quot;
			pidsInBatch+=($processId)
			if [ &quot;${#pidsInBatch[@]}&quot; == &quot;$BATCH_SIZE&quot; ];then
				waitForBackgroundProcesses ${pidsInBatch[@]}
				pidsInBatch=()
			fi  
		done
&lt;/pre&gt;&lt;p&gt;However when parent script exits, it will leave the background jobs running. To terminate background jobs as well, we need to do another trap handling for script exit:&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;trap &apos;bgPids=$(jobs -pr); [ -z &quot;$bgPids&quot; ] || kill &quot;$bgPids&quot;;&apos; EXIT&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;h2&gt;Compare two files line by line ignoring the ordering&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# returns 1 if the match doesn&apos;t hold true
# otherwise 0
#
# return code can be verified as exit code after
# the function call
function compareFile1InFile2(){
	local file1=$1
	local file2=$2
	local lineCountFile1=$(cat $file1|wc -l)
	local numberOfLinesMatched=$(grep -f &quot;$file1&quot; &quot;$file2&quot; |sort -u|wc -l)
	if [ &quot;$numberOfLinesMatched&quot; != &quot;$lineCountFile1&quot; ];then
		return 1
	else
		return 0
	fi
}
&lt;/pre&gt;&lt;h2&gt;Diff between two variables&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# example:
#	diffVar1Var2 &quot;$var1&quot; &quot;$var2&quot;
function diffVar1Var2(){
        local var1=$1
        local var2=$2
        diff &lt;(echo &quot;$var1&quot;) &lt;(echo &quot;$var2&quot;)
}
&lt;/pre&gt;&lt;h2&gt;Show differences between two arrays&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# space works as separator for elements inside a variable
# example:
#	diffXVar1Var2 &quot;${array1[@]}&quot; &quot;${array2[@]}&quot;
function diffXVar1Var2(){
        local var1=$1
        local var2=$2
        diff &lt;(echo &quot;$var1&quot;|tr &apos; &apos; &apos;\n&apos;|sort) &lt;(echo &quot;$var2&quot;|tr &apos; &apos; &apos;\n&apos;|sort)
}
&lt;/pre&gt;&lt;h2&gt;Check if host is reachable on a given port&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
function isReachable(){
	local host=$1
	local port=$2
	nc -w 1 -z &quot;$host&quot; &quot;$port&quot;
}
&lt;/pre&gt;&lt;h2&gt;Multi-line echo statements&lt;/h2&gt;&lt;p&gt;This is very useful for generating a templated output&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
cat&amp;lt;&amp;lt;EOL
# can use shell variables as well in between the EOL,
# the variables would be expanded.
var1=$var1
EOL
&lt;/pre&gt;&lt;h2&gt;Handling script inputs&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# verify that parameters were passed
[ &quot;$#&quot; == &quot;0&quot; ] &amp;&amp; showUsage
# &quot;:&quot; after a character indicates the parameter requires a value
# for example after a and p
while getopts &quot;fa:p:&quot; opt; do
	case &quot;$opt&quot; in
		f) flagEnabled=&quot;1&quot; ;;
		a) argsAsArray+=(&quot;$OPTARG&quot;) ;;
		s) argAsParam=&quot;$OPTARG&quot; ;;
		*) 
		   showUsage &gt;&amp;2
		   ;;
	esac
done
validateOptions
&lt;/pre&gt;&lt;h2&gt;Log all script activity to a log file&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# enable debugging, prints script lines to the stdout
set -x
# execute the rest of the script and append the output to 
# LOG_FILE 
exec &amp;&gt; &gt;(tee -a &quot;$LOG_FILE&quot;)
# write stderr to stdout for the rest of the script
exec 2&gt;&amp;1
&lt;/pre&gt;&lt;h2&gt;Checking regex in if condition&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# check if value of var starts with &quot;MY_PREFIX&quot;
if [[ &quot;$var&quot; =~ ^MY_PREFIX ]];then
	# do something
fi
# check if value of var doesn&apos;t start with &quot;MY_PREFIX&quot;
if [[ ! &quot;$var&quot; =~ ^MY_PREFIX ]];then
	# do something
fi
# check if value of var contains &quot;MY_VALUE&quot;
if [[ &quot;$var&quot; =~ MY_VALUE ]];then
	# do something
fi
&lt;/pre&gt;&lt;h2&gt;Sharing variables and utility functions across multiple scripts&lt;/h2&gt;&lt;p&gt;Define shared variables and utility functions in logically separate scripts and include them in every script where needed like below.&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
source path/library1.sh
. path/library2.sh
&lt;/pre&gt;&lt;h2&gt;Reading a file line by line&lt;/h2&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
OLDIFS=$IFS
# changing field separator so that we can read line by line
IFS=$&apos;\n&apos;
i=1
allLines=$(cat ${FILE})
for line in $allLines;
do
	# changing field separator back so that rest of the logic works normally
	IFS=$OLDIFS
	echo &quot;line $i: $line&quot;
	i=$((i + 1))
done
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>Git: quick tips</title>
      <link>http://www.sumitkumar.in/blog/2015/git_tips.html</link>
      <pubDate>Mon, 9 Nov 2015 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2015/git_tips.html</guid>
      <description>
      &lt;p&gt;&lt;strong&gt;Handy commands&lt;/strong&gt;&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;&lt;li&gt;Change a commit message (only if it has not been pushed to upstream)&lt;/li&gt;&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;$ git commit --amend -m &quot;&amp;lt;NEW_COMMIT_MESSAGE&amp;gt;&quot;&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;li&gt;List difference of commits (list of commits) between branches &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git cherry -v &amp;lt;other_branch&amp;gt;
+ 2deea696b5040f3269130aa5cadd5a8c123550b3 first commit
+ cc08a232c5a06f409f6e1f8fc8915e27a1485a22 second commit
- 24831ddb1788217ff24da9e85038dadf7045db7e different commit on the other_branch
&lt;/pre&gt;
&lt;li&gt;Merge multiple changes from a separate branch &quot;branch-x&quot; into current branch&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git merge --squash branch-x
&lt;/pre&gt;
&lt;li&gt;Pull changes from remote without creating &quot;pseudo change&quot; commits and rebase local changes on top of remote state&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git pull --rebase
&lt;/pre&gt;
&lt;li&gt;Merge and/or squash multiple changes (N number of commits) in current branch&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git rebase -i HEAD~N
&lt;/pre&gt;
&lt;li&gt;Push local branch to a different branch&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git push origin branch-x-v2:branch-x-v2-sumit
Total 0 (delta 0), reused 0 (delta 0)
To ssh://git.server.com/pkg/MyPackage
 * [new branch]      branch-x-v2 -&gt; branch-x-v2-sumit
&lt;/pre&gt;
&lt;li&gt;Rename a remote branch without changing local branches &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git push origin origin/branch-x-v2:refs/heads/branch-x-v2-old :branch-x-v2
Total 0 (delta 0), reused 0 (delta 0)
To ssh://git.server.com/pkg/MyPackage
 - [deleted]         branch-x-v1
 * [new branch]      origin/branch-x-v2 -&gt; branch-x-v2-old
&lt;/pre&gt;&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Git Stash&lt;/strong&gt;&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;&lt;li&gt;Push uncommitted changes to stash &lt;/li&gt;&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;$ git stash save &quot;message&quot;&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;li&gt;See list of stashes&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash list
stash@{0}: On branch-x: foo bar 1
stash@{1}: On branch-x: foo bar
&lt;/pre&gt;
&lt;li&gt;See changes in a particular stash&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash show -p stash@{0}
diff --git a/build.xml b/build.xml
index 6ce3fdf..15669ac 100644
--- a/build.xml
+++ b/build.xml
@@ -2,7 +2,6 @@
 
....
....
&lt;/pre&gt;
&lt;li&gt;Remove a single stash from the list and apply to current state&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash pop stash@{1}
On branch branch-x
Your branch is up-to-date with &apos;origin/branch-x&apos;.
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
 
        modified:   build.xml
 
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)
 
        ....
 
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
Dropped stash@{1} (caceeb6392c7a40dd8325f3a2fdf038342e629cf)
&lt;/pre&gt;
&lt;li&gt;Apply a single stash without removing it from the list &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash apply stash@{0}
On branch branch-x
Your branch is up-to-date with &apos;origin/branch-x&apos;.
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
 
        modified:   build.xml
 
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)
.....
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/pre&gt;
&lt;li&gt;Create a branch out of a stash &lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash branch my-branch stash@{0}
&lt;/pre&gt;
&lt;li&gt;Drop a stash&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash drop stash@{0}   
Dropped stash@{0} (f697125c22addf9cf31e8ac36b384857110fec0e)
&lt;/pre&gt;
&lt;li&gt;Clear all stash&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git stash clear
&lt;/pre&gt;&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Using vimdiff for resolving merge conflicts &lt;/strong&gt;&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;&lt;li&gt;Run mergetool on conflict&lt;/li&gt;&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;&lt;br/&gt;git mergetool&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;li&gt;Configure vimdiff as mergetool&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
$ git config merge.tool vimdiff
$ git config merge.conflictstyle diff3
$ git config mergetool.prompt false
&lt;/pre&gt;
&lt;li&gt;Doing merge on vimdiff&lt;/li&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
# get diff from REMOTE – file we are merging into your branch
:diffget RE
:diffg RE
# get diff from BASE - common ancestor, how file looked before both changes
:diffget BA
:diffg BA
# get diff from LOCAL – this is file from the current branch
:diffget LO
:diffg LO
&lt;/pre&gt;&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Python: pretty print json</title>
      <link>http://www.sumitkumar.in/blog/2015/pretty-print-json-shell.html</link>
      <pubDate>Mon, 9 Nov 2015 00:00:00 -0800</pubDate>
      <guid isPermaLink="false">blog/2015/pretty-print-json-shell.html</guid>
      <description>
      &lt;p&gt;Original source: &lt;a href=&quot;http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json&quot;&gt;http://stackoverflow.com/questions/352098/how-can-i-pretty-print-json&lt;/a&gt;&lt;/p&gt;&lt;p&gt;With Python 2.6+&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:python&quot;&gt;&lt;br/&gt;echo &apos;{&quot;foo&quot;: &quot;lorem&quot;, &quot;bar&quot;: &quot;ipsum&quot;}&apos; | python -m json.tool&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Or if the json data is in file:&lt;br/&gt;&lt;pre name=&quot;code&quot; class=&quot;brush:python&quot;&gt;&lt;br/&gt;cat &amp;lt;data_file&amp;gt; | python -m json.tool&lt;br/&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;Handly shell alias:&lt;/p&gt;
&lt;pre name=&quot;code&quot; class=&quot;brush:bash&quot;&gt;
alias prettyjson=&apos;python -m json.tool&apos;
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>MySQL: drop all tables</title>
      <link>http://www.sumitkumar.in/blog/2013/mysql-drop-all-tables.html</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/mysql-drop-all-tables.html</guid>
      <description>
      &lt;pre name=&quot;code&quot; class=&quot;brush:sql&quot;&gt;
mysql -Nse &apos;show tables&apos; -u &amp;lt;user&amp;gt; -h &amp;lt;host&amp;gt; &amp;lt;dbname&amp;gt;| while read table; do \
mysql -e &quot;drop table $table&quot; -u &amp;lt;user&amp;gt; -h &amp;lt;host&amp;gt; &amp;lt;dbname&amp;gt;; 
done
&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>Eclipse plugins</title>
      <link>http://www.sumitkumar.in/blog/2013/eclipse-plugins.html</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/eclipse-plugins.html</guid>
      <description>
      &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/pathtools/&quot;&gt;PathTools&lt;/a&gt;: Provides contextual menu for console, explorer etc&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/zigen/home/plugin/dbviewer/about_en.html&quot;&gt;DBViewer&lt;/a&gt;: Manage your db instances right from eclipse&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marian.schedenig.name/projects/grep-console&quot;&gt;Grep Console&lt;/a&gt;: Filter what you want to see in the console&lt;/li&gt;
&lt;/ol&gt;
	  </description>
    </item>
    
    <item>
      <title>Firefox plugins</title>
      <link>http://www.sumitkumar.in/blog/2013/firefox-plugins.html</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/firefox-plugins.html</guid>
      <description>
      &lt;ol&gt;
  &lt;li&gt;WebDeveloper (download &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/web-developer/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;FoxyProxy (download &lt;a href=&quot;http://getfoxyproxy.org/downloads.html&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;LiveHttpHeaders (download &lt;a href=&quot;http://livehttpheaders.mozdev.org/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;AdBlockPlus (download &lt;a href=&quot;http://adblockplus.org/en/installation&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Delicious - (download &lt;a href=&quot;http://delicious.com/help/installff&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Smush!t - (download &lt;a href=&quot;http://developer.yahoo.com/yslow/smushit/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;FoxyTunes - (download &lt;a href=&quot;http://www.foxytunes.com/firefox/allversions.html&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;FireBug - (download &lt;a href=&quot;http://getfirebug.com/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;YSlow - (download &lt;a href=&quot;http://developer.yahoo.com/yslow/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;JsonView - (download &lt;a href=&quot;http://code.google.com/p/jsonview/&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
	  </description>
    </item>
    
    <item>
      <title>Thunderbird plugins</title>
      <link>http://www.sumitkumar.in/blog/2013/thunderbird-plugins.html</link>
      <pubDate>Wed, 21 Aug 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/thunderbird-plugins.html</guid>
      <description>
      &lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/protz/GMail-Conversation-View&quot;&gt;Thunderbird Conversations&lt;/a&gt;: Bring GMail conversation view to your inbox&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tn123.org/mintrayr/&quot;&gt;MinimizeToTray Revived&lt;/a&gt;: Minimize thunderbird to system tray&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lookout.mozdev.org/&quot;&gt;LookOut&lt;/a&gt;: Support for M$ OLE data (calendar format, winmail.dat attachments etc)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://addons.mozilla.org/thunderbird/addon/4631&quot;&gt;Provider for Google Calendar&lt;/a&gt;: Support for Google calendar&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mozilla.org/projects/calendar/lightning&quot;&gt;Lightning&lt;/a&gt;: Support for calendar out of thunderbird&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clarkbw.net/blog/2009/11/23/google-calendar-in-thunderbird-tabs&quot;&gt;Google calendar tab&lt;/a&gt;: Google calendar as a tab in thunderbird&lt;/li&gt;
&lt;/ol&gt;
	  </description>
    </item>
    

  </channel> 
</rss>
